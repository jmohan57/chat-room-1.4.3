// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model BotSession {
  group_id Int @id
  session_id String

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  @@index([group_id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("User")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  owned_groups        Group[]
  members       Member[]
  messages Message[]
  sent_dms DirectMessage[] @relation(name: "sent_dms")
  received_dms DirectMessage[] @relation(name: "received_dms")
  sent_dm_info DirectMessageChannel[] @relation(name: "sent_dm_info")
  received_dm_info DirectMessageChannel[] @relation(name: "received_dm_info")
  is_ai Boolean @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(256)
  unique_name   String @db.VarChar(32) @unique @default(cuid())
  icon_hash Int?
  owner_id  String
  public Boolean @default(false)

  owner   User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  members Member[]
  messages Message[]
  invites GroupInvite[]
  ai_session BotSession?

  @@index([owner_id])
}

model DirectMessage {
  id Int @id @default(autoincrement())
  author_id    String
  receiver_id String
  content String @db.VarChar(2000)
  timestamp DateTime @default(now())

  author User @relation(name: "sent_dms", fields: [author_id], references: [id], onDelete: Cascade)
  receiver User @relation(name: "received_dms", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@index([receiver_id])
  @@index([author_id])
}

model DirectMessageChannel {
  author_id    String
  receiver_id String

  author User @relation(name: "sent_dm_info", fields: [author_id], references: [id], onDelete: Cascade)
  receiver User @relation(name: "received_dm_info", fields: [receiver_id], references: [id], onDelete: Cascade)
  @@id([author_id, receiver_id])

  @@index([author_id])
  @@index([receiver_id])
}

model GroupInvite {
  group_id Int
  code String @default(uuid()) @id
  
  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@index([group_id])
}

model Member {
  group_id Int
  user_id  String

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([group_id, user_id])
  @@index([group_id])
  @@index([user_id])
}

model Message {
  id Int @id @default(autoincrement())
  group_id Int
  author_id String
  content String @db.VarChar(2000)
  timestamp DateTime @default(now())

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  author User @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([group_id])
  @@index([author_id])
}
